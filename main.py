import time
import streamlit as st
from pdf2image import convert_from_path
import pytesseract
from concurrent.futures import ThreadPoolExecutor, as_completed
import os
import base64

# --- C·∫§U H√åNH TRANG ---
st.set_page_config(
    page_title="PDF to Text Converter",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- H√†m chuy·ªÉn ·∫£nh th√†nh Base64 ---
def img_to_base64(path: str) -> str:
    with open(path, "rb") as f:
        data = f.read()
    return base64.b64encode(data).decode()

img_path = "image/hinh-nen.png"  # ho·∫∑c .png, .jpeg t√πy file
b64 = img_to_base64(img_path)

# --- CSS Nh√∫ng Background cho To√†n B·ªô ·ª®ng D·ª•ng ---
st.markdown(
    f"""
    <style>
    /* To√†n b·ªô ·ª©ng d·ª•ng */
    [data-testid="stAppViewContainer"] {{
        background-image: url("data:image/png;base64,{b64}");
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        position: relative;
    }}
    /* Overlay tr·∫Øng 70% (tu·ª≥ ch·ªçn) */
    [data-testid="stAppViewContainer"]::before {{
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255,255,255,0.6);
        pointer-events: none;
    }}
    </style>
    """,
    unsafe_allow_html=True
)

# --- CSS  ---
st.markdown(
    """
    <style>
    /* Header */
    h1 { color: #0288d1; }

    /* Buttons: n·ªÅn tr·∫Øng, ch·ªØ ƒëen */
    .stButton>button {
        background-color: #ffffff;
        color: #000000;
        border: 1px solid #ccc;
        border-radius: 8px;
        padding: 0.5em 1em;
    }
    .stButton>button:hover {
        background-color: #f0f0f0;
    }

    /* Progress bar */
    .stProgress>div>div>div>div {
        background-color: #0288d1 !important;
    }

    /* Sidebar: n·ªÅn xanh ho√†ng gia v√† ch·ªØ tr·∫Øng */
    [data-testid="stSidebar"] {
        background-color: #4662E9 !important;
    }
    [data-testid="stSidebar"] * {
        color: white !important;
    }
    [data-testid="stSidebar"] {
    background-color: rgba(70, 98, 233, 0.7) !important; /* 70% opacity */
    }
    </style>
    """,
    unsafe_allow_html=True
)

# --- N·ªòI DUNG TR√äN SIDEBAR ---
with st.sidebar:
    st.title("üìä D·ª± √°n nghi√™n c·ª©u")
    st.write("""
**Nghi√™n c·ª©u n·ªôi dung t∆∞·ªùng thu·∫≠t tr√™n b√°o c√°o th∆∞·ªùng ni√™n v√† m·ªëi quan h·ªá t∆∞∆°ng quan gi·ªØa n·ªôi dung t∆∞·ªùng thu·∫≠t v·ªõi kh·∫£ nƒÉng sinh l·ª£i c·ªßa c√°c c√¥ng ty ni√™m y·∫øt t·∫°i Vi·ªát Nam**
""")

# --- H√ÄM X·ª¨ L√ù ---
def pdf_to_images(pdf_path: str, dpi: int = 150):
    return convert_from_path(pdf_path, dpi=dpi)

def ocr_image(img) -> str:
    return pytesseract.image_to_string(img, lang='vie+eng')

def convert_images_to_text_parallel(images: list) -> str:
    progress = st.progress(0)
    total = len(images)
    results = [''] * total
    with ThreadPoolExecutor() as executor:
        futures = {executor.submit(ocr_image, img): idx for idx, img in enumerate(images)}
        completed = 0
        for future in as_completed(futures):
            idx = futures[future]
            try:
                results[idx] = future.result()
            except:
                results[idx] = ""
            completed += 1
            progress.progress(completed / total)
    return "\n".join(results)

# --- SESSION STATE ---
if 'txt_path' not in st.session_state:
    st.session_state.txt_path = None
    st.session_state.elapsed = None

# --- KHU V·ª∞C CH√çNH: INPUT CONTROLS + K·∫æT QU·∫¢ ---
st.title("üìÑ PDF to Text Converter")
st.write("T·∫£i l√™n t·ªáp PDF v√† nh·∫•n n√∫t ƒë·ªÉ chuy·ªÉn ƒë·ªïi sang text:")

uploaded_file = st.file_uploader("Ch·ªçn t·ªáp PDF", type="pdf")
start_btn = st.button("‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªïi")

if start_btn and uploaded_file and st.session_state.txt_path is None:
    pdf_path = "/tmp/uploaded_pdf.pdf"
    with open(pdf_path, "wb") as f:
        f.write(uploaded_file.read())
    start_time = time.time()
    with st.spinner("ƒêang x·ª≠ l√Ω PDF, vui l√≤ng ch·ªù..."):
        images = pdf_to_images(pdf_path)
        text = convert_images_to_text_parallel(images)
    st.session_state.elapsed = time.time() - start_time

    if text.strip():
        txt_path = "/tmp/output_text.txt"
        with open(txt_path, "w", encoding="utf-8") as f:
            f.write(text)
        st.session_state.txt_path = txt_path
        st.success(f"‚úÖ Ho√†n t·∫•t trong {st.session_state.elapsed:.2f} gi√¢y.")
    else:
        st.error(f"‚ùå Kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c vƒÉn b·∫£n ({st.session_state.elapsed:.2f} gi√¢y).")

if st.session_state.txt_path:
    col1, col2 = st.columns(2)
    with col1:
        st.download_button(
            label="üì• T·∫£i xu·ªëng t·ªáp vƒÉn b·∫£n",
            data=open(st.session_state.txt_path, "rb").read(),
            file_name="output_text.txt",
            mime="text/plain"
        )
    with col2:
        if st.button("üîÑ Chuy·ªÉn file kh√°c"):
            st.session_state.txt_path = None
            st.rerun()
